{"version":3,"file":"static/webpack/static/development/pages/_app.js.0dac0a3c85b7c9740a47.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\n\nimport { getCookieFromReq } from '../helpers/utils';\n\n\nclass Auth {\n  constructor(){\n      this.auth0 = new auth0.WebAuth({\n        domain: 'dev-2bsg3wrj.auth0.com',\n        clientID: 'dKFtYDSGMaj3AlqOK69aBzENqT7wvURy',\n        redirectUri: 'http://localhost:3000/callback',\n        responseType: 'token id_token',\n        scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    })\n  }\n\n\n  setSession(authResult) {\n    const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n\n    Cookies.set('jwt', authResult.idToken);\n  }\n\n  logout() {\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n\n      this.auth0.logout({\n          returnTo: '',\n          clientID: 'dKFtYDSGMaj3AlqOK69aBzENqT7wvURy'\n      })\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  async getJWKS() {\n    const res = await axios.get(`https://dev-2bsg3wrj.auth0.com/.well-known/jwks.json`);\n    const jwks = res.data;\n    return jwks;\n  }\n  \n  async verifyToken(token){\n    if (token){\n      const decodedToken = jwt.decode(token, { complete: true });\n      const jwks = await this.getJWKS();\n     \n      const jwk = jwks.keys[0];\n      // BUILD CERTIFICATE;\n      let cert = jwk.x5c[0];\n      cert = cert.match(/.{1,64}/g).join('\\n');\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`; \n      \n      console.log(\"jwk\",jwk .kid);\n      console.log(\"decodedToken\",decodedToken.header.kid);\n\n      if (jwk.kid === decodedToken.header.kid) {\n        try {\n          const verifiedToken = jwt.verify(token, cert);\n          const expiresAt = verifiedToken.exp * 1000;\n\n          return (verifiedToken && new Date().getTime() < expiresAt) ? verifiedToken : undefined;\n        } catch(err) {\n          return console.log(err);\n        }\n      }\n    }\n    return undefined;\n  }\n\n  async clientAuth() {\n    const token = Cookies.getJSON('jwt');\n    const verifiedToken = await this.verifyToken(token);\n\n    return verifiedToken;\n  }\n\n  async serverAuth(req) {\n    if(req.headers.cookie) {\n      const token = getCookieFromReq(req, 'jwt');\n      const verifiedToken = await this.verifyToken(token)\n      return verifiedToken;\n    }\n    return undefined;\n  }\n\n}\n\nconst auth0Client = new Auth();\n\nexport default auth0Client;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;;;;;;;;;;;AAGA;AACA;;AADA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;;AACA;AAAA;AAAA;;AACA;AACA;;AADA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAEA;AACA;AAEA;AACA;;;;AACA;AACA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;AACA;;AADA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;;AACA;;AACA;AACA;;AADA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAIA;AAEA;;;;A","sourceRoot":""}